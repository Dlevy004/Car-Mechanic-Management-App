@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@using CarMechanic.Client.Services

<header id="header"> 
    <div class="icons">
        <img id="searchLight" class="icon anim lightImg" 
            src="./images/search_24dp_2D425C_FILL0_wght400_GRAD0_opsz24.svg" 
            alt="Search Icon">
        <img id="searchDark" class="icon anim darkImg" 
            src="./images/search_24dp_E2E1E2_FILL1_wght400_GRAD0_opsz24.svg" 
            alt="Search icon in darkmode">

        <img @onclick="ToggleProfilePanel"
            id="profileLight" class="icon anim lightImg" 
            src="./images/account_circle_24dp_2D425C_FILL1_wght400_GRAD0_opsz24.svg" 
            alt="Profil icon">
        <img @onclick="ToggleProfilePanel"
            id="profileDark" class="icon anim darkImg" 
            src="./images/account_circle_24dp_E2E1E2_FILL1_wght400_GRAD0_opsz24.svg" 
            alt="Profil icon in darkmode">

        <button class="icon anim theme-switch" @onclick="() => SetDarkMode(!darkMode)">
            @if (darkMode)
            {
                <img src="./images/toggle_on_24dp_2D425C_FILL0_wght400_GRAD0_opsz24.svg" 
                    alt="Toggle On icon">
            }
            else
            {
                <img src="./images/toggle_off_24dp_2D425C_FILL1_wght400_GRAD0_opsz24.svg" 
                    alt="Toggle Off icon">
            }
        </button>
    </div>

    <div id="panel-toggle">
        <div class="current-panel @(showCustomers ? "" : "jobs-active")">
            <a class="@(showCustomers ? "active-panel" : "")"
               @onclick="() => OnPanelChange.InvokeAsync(true)"
               id="btn-customer">
                <h1>Customers</h1>
            </a>
            <a class="@(!showCustomers ? "active-panel" : "")"
               @onclick="() => OnPanelChange.InvokeAsync(false)"
               id="btn-jobs">
                <h1>Jobs</h1>
            </a>
        </div>
    </div>
</header>

<ProfilePanel IsVisible="profileVisible"
              OnClose="CloseProfilePanel"
              OnLogout="HandleUserLogout" />

@code {
    private bool profileVisible = false;
    private bool darkMode = false;

    [Parameter] public bool showCustomers { get; set; }
    [Parameter] public EventCallback<bool> OnPanelChange { get; set; }

    private async Task SetBodyClass(string className, bool add) 
        => await JS.InvokeVoidAsync(
            "eval", 
            $"document.body.classList.{(add ? "add" : "remove")}('{className}')");

    private async Task SetDarkMode(bool isDark)
    {
        darkMode = isDark;
        await SetBodyClass("darkmode", darkMode);
    }

    private void ToggleProfilePanel()
    {
        profileVisible = !profileVisible;
    }

    private void CloseProfilePanel()
    {
        profileVisible = false;
    }

    private async Task HandleUserLogout()
    {
        await AuthService.Logout();
        NavigationManager.NavigateTo("/");
    }
}

