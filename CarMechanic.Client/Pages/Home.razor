@page "/dashboard"

@using CarMechanic.Shared.Models;
@using System.Text;
@inject IJSRuntime JS;

<CarMechanic.Client.Components.Navbar showCustomers="showCustomers"
                                      OnPanelChange="PanelChanged"
                                      OnDownloadClicked="HandleDownload"/>

<CarMechanic.Client.Components.AddCustomerPanel IsVisible="isAddCustomerPanelVisible"
                                                CustomerToEdit="customerToEdit"
                                                OnClose="ClosePanel" />

<CarMechanic.Client.Components.AddJobPanel IsVisible="isAddJobPanelVisible"
                                           JobToEdit="jobToEdit"
                                           OnClose="ClosePanel" />

<div class="panel-container @(showCustomers ? "show-customers" : "show-jobs")">
    <div class="panel customer-panel">
		<CarMechanic.Client.Components.Customers @ref="customersComponent"
        OnAddCustomer="OpenCustomerPanel"/>
    </div>

    <div class="panel jobs-panel">
		<CarMechanic.Client.Components.Jobs @ref="jobsComponent"
        OnAddJob="OpenJobPanel"/>
    </div>
</div>

@code {
    public bool showCustomers = true;
    private CarMechanic.Client.Components.Customers customersComponent;
    private CarMechanic.Client.Components.Jobs jobsComponent;
    private bool isAddCustomerPanelVisible = false;
    private bool isAddJobPanelVisible = false;
    private Customer customerToEdit;
    private Job jobToEdit;

    private void OpenCustomerPanel(Customer customer)
    {
        customerToEdit = customer;
        isAddCustomerPanelVisible = true;
    }

    private void OpenJobPanel(Job job)
    {
        jobToEdit = job; // Ha job null, akkor 'Add', else 'Edit'
        isAddJobPanelVisible = true;
    }

    private void PanelChanged(bool isCustomersSelected)
    {
        showCustomers = isCustomersSelected;
    }

    private async Task ClosePanel()
    {
        bool wasCustomerPanelVisible = isAddCustomerPanelVisible;
        bool wasJobPanelVisible = isAddJobPanelVisible;

        isAddCustomerPanelVisible = false;
        isAddJobPanelVisible = false;
        customerToEdit = null;
        jobToEdit = null;

        StateHasChanged();

        if (wasCustomerPanelVisible)
        {
            await customersComponent.LoadCustomers();
        }

        if (wasJobPanelVisible)
        {
            await jobsComponent.LoadJobs();
        }
    }

    private async Task HandleDownload()
    {
        var csvBuilder = new StringBuilder();
        string fileName;

        if (showCustomers)
        {
            fileName = "customers_export.csv";
            // Fejléc
            csvBuilder.AppendLine("Id,Name,Email,Address");

            // Adatok
            var listToDownload = customersComponent.FilteredCustomers;
            if (listToDownload != null)
            {
                foreach (var customer in listToDownload)
                {
                    csvBuilder.AppendLine($"\"{customer.Id}\",\"{customer.Name}\",\"{customer.Email}\",\"{customer.Address}\"");
                }
            }
        }
        else
        {
            fileName = "jobs_export.csv";
            // Fejléc
            csvBuilder.AppendLine("Id,CustomerId,LicensePlateNumber,VehicleYear,JobCategory,Severity,JobStage,IssueDescription");

            // Adatok
            var listToDownload = jobsComponent.FilteredJobs;
            if (listToDownload != null)
            {
                foreach (var job in listToDownload)
                {
                    var description = job.VehicleIssueDescription?.Replace("\"", "\"\"") ?? "";
                    csvBuilder.AppendLine($"\"{job.Id}\",\"{job.CustomerId}\",\"{job.LicensePlateNumber}\",\"{job.VehicleYear}\",\"{job.JobCategory}\",\"{job.Severity}\",\"{job.JobStage}\",\"{description}\""); // Idézőjelek a leírás köré is
                }
            }
        }

        await JS.InvokeVoidAsync("downloadFile", fileName, csvBuilder.ToString());
    }
}
